[{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/assemblage-time-series.html","id":"assemblage-regional-richness","dir":"Articles","previous_headings":"","what":"Assemblage regional richness","title":"Building time series based on species coexistence","text":"plotting time series based mean assemblage regional richness can plot grid values different time slices summary metric considering time slices can also plot variance richness time Plotting together","code":"df_assemblage_reg_richness <-    Assemblage_regional_richness(df.TS.TE = df_TS_TE_faurby,                                df.occ = df_occ_faurby,                                 time.slice = 0.1,                                 grid.size = 5,                                round.digits = 1,                                species = \"species\",                                TS = \"TS\",                                TE = \"TE\",                                Max.age = \"Max.age\",                                Min.age = \"Min.age\",                                 lat = \"lat\",                                 lon = \"lng\",                                 crs = 4326) df_assemblage_timeseries_richness <- df_assemblage_reg_richness$time_series_rich  df_assemblage_timeseries_richness |>    ggplot(aes(x = time.slice, y = mean.rich.by.grid.slice)) +  # Line thickness for better visibility   geom_point(aes(x = time.slice, y = mean.rich.by.grid.slice)) +   geom_smooth(se = TRUE, method = \"loess\", size = 1) +   labs(title = \"\",        x = \"Time\",        y = \"Mean species richness assemblage\") +   theme_minimal()  +   scale_x_continuous(breaks = seq(max(df_assemblage_timeseries_richness$time.slice), 0, by = -10)) +   scale_x_reverse() +   theme(legend.position = \"none\")# Use a clean theme df_assemblage_grid_richness <- df_assemblage_reg_richness$grid_mean_age  continents <- rnaturalearth::ne_coastline(scale = \"medium\", returnclass = \"sf\") sf_mean_site <- sf::st_transform(df_assemblage_grid_richness, crs = \"+proj=moll +x_0=0 +y_0=0 +lat_0=0 +lon_0=0\") continents <- sf::st_transform(continents, crs = \"+proj=moll +x_0=0 +y_0=0 +lat_0=0 +lon_0=0\")  map_rich_grid <-    ggplot() +   geom_sf(data = sf_mean_site, aes(geometry = geometry, fill = mean.age.grid),           color = \"white\") +  # Your data   geom_sf(data = continents, fill = NA, color = \"black\") +  # Continent boundaries   rcartocolor::scale_fill_carto_c(name = \"Richness\", type = \"quantitative\", palette = \"SunsetDark\") +  # Optional: Use a color scale   theme_bw() +   labs(title = \"\",        fill = \"Mean mpd by site\") +   theme(     axis.text = element_blank(),       axis.ticks = element_blank(),     axis.line = element_blank()   ) map_var_grid <-    ggplot() +   geom_sf(data = sf_mean_site, aes(geometry = geometry, fill = var.age.grid),           color = \"white\") +  # Your data   geom_sf(data = continents, fill = NA, color = \"black\") +  # Continent boundaries   rcartocolor::scale_fill_carto_c(name = \"Richness variance\", type = \"quantitative\", palette = \"SunsetDark\") +  # Optional: Use a color scale   theme_bw() +   labs(title = \"\",        fill = \"richness variance\") +   theme(     axis.text = element_blank(),       axis.ticks = element_blank(),     axis.line = element_blank()   ) library(patchwork) map_grid_rich_var <-    map_rich_grid + map_var_grid +   plot_layout(nrow = 2) map_grid_rich_var"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/assemblage-time-series.html","id":"assemblage-regional-mpd","dir":"Articles","previous_headings":"","what":"Assemblage regional mpd","title":"Building time series based on species coexistence","text":"plotting mpd assemblage","code":"df_assemblage_reg_mpd <-    Assemblage_regional_mpd(df.TS.TE = df_TS_TE_mass,                         df.occ = df_occ_faurby,                          time.slice = 0.1,                          grid.size = 5,                          trait = \"mean.size\",                          round.digits = 1,                         species = \"species\",                          TS = \"TS\",                          TE = \"TE\",                         Max.age = \"Max.age\",                         Min.age = \"Min.age\",                          lat = \"lat\",                         lon = \"lng\",                         crs = 4326) df_assemblage_reg_mpd2 <-    df_assemblage_reg_mpd$mean_mpd_timeslice  df_assemblage_reg_mpd2 |>    ggplot(aes(x = time.slice, y = mean.mpd)) +  # Line thickness for better visibility   geom_point(aes(x = time.slice, y = mean.mpd)) +   geom_smooth(se = TRUE, method = \"loess\", size = 1) +   labs(title = \"\",        x = \"Time\",        y = \"Mean mpd assemblage\") +   theme_minimal()  +   scale_x_continuous(breaks = seq(max(df_assemblage_reg_richness$time_series_rich$time.slice), 0, by = -10)) +   scale_x_reverse() +   theme(legend.position = \"none\")# Use a clean theme"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/assemblage-time-series.html","id":"mapping-diversity-in-space","dir":"Articles","previous_headings":"","what":"Mapping diversity in space","title":"Building time series based on species coexistence","text":"map richness mpd space time","code":"# plotting in a map  sf_mean_site <- sf::st_as_sf(df_assemblage_reg_mpd$mean_mpd_grid)   continents <- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\") sf_mean_site2 <- sf::st_transform(sf_mean_site, crs = \"+proj=moll +x_0=0 +y_0=0 +lat_0=0 +lon_0=0\") continents <- sf::st_transform(continents, crs = \"+proj=moll +x_0=0 +y_0=0 +lat_0=0 +lon_0=0\")   ggplot() +   geom_sf(data = sf_mean_site2, aes(geometry = geometry, fill = grid.mean),           color = \"white\") +  # Your data   geom_sf(data = continents, fill = NA, color = \"black\") +  # Continent boundaries   rcartocolor::scale_fill_carto_c(name = \"MPD\", type = \"quantitative\", palette = \"SunsetDark\") +  # Optional: Use a color scale   theme_bw() +   labs(title = \"\",        fill = \"Mean mpd by site\") +   theme(     axis.text = element_blank(),       axis.ticks = element_blank(),     axis.line = element_blank()   )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/pre-processing-data.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"pre-processing-data","text":"tutorial present data longevity fossil occurrence can used investigate imprints species competition different levels. done help new R package Buccaneer","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/pre-processing-data.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"pre-processing-data","text":"use data Faurby et al (2024) demonstrate new Buccaneer R package can used processing data analysis. data contains information fossil data extant extinct species mammalian carnivores related extinct groups (Carnivoramorpha, Hyaenodonta Oxyaenidae)retrieved Paleobiology Database New Old Worlds database.","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/pre-processing-data.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"pre-processing-data","text":"","code":"library(dplyr) df.faurby <- read.csv(here::here(\"data\", \"data_faurby.csv\"), sep = \";\") # dataset from https://royalsocietypublishing.org/doi/10.1098/rspb.2024.0473 df.body.mass <- read.csv(here::here(\"data\", \"Inferred_Size_Carnivoramorpha.csv\"), sep = \",\") # dataset from https://royalsocietypublishing.org/doi/10.1098/rspb.2024.0473 taxonomic_placement <- read.csv(here::here(\"data\", \"taxonomic_placement.csv\"), sep = \";\")"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/pre-processing-data.html","id":"general-cleaning-and-processing","dir":"Articles","previous_headings":"","what":"General cleaning and processing","title":"pre-processing-data","text":"filter original data keeping Carnivora species suborders Caniformia Feliformia records Eurasia Keeping site ID PBDB. use NOW ID PBDB absent Processing data body mass calculating mean value species","code":"taxonomic_placement2 <-    taxonomic_placement |>    filter(Suborder == \"Caniformia\" | Suborder == \"Feliformia\")   # adding a new column with genus and species to taxonomic placement and occurrence records taxonomic_placement2$genus.species <- paste(taxonomic_placement2$Genus, taxonomic_placement2$Species, sep = \"_\") df.faurby$genus.species <- paste(df.faurby$Genus, df.faurby$Species, sep = \"_\")   df.faurby2 <-    taxonomic_placement2 |>    left_join(df.faurby, by = c(genus.species = \"genus.species\")) |>    select(-Family.y, -Genus.y, -Species.y) |>    rename(Family = Family.x, Genus = Genus.x, Species = Species.x)  # keeping only Europe and NA df.faurby3 <-    df.faurby2 |>    filter(Continent == \"Europe\" | Continent == \"Asia\") df.faurby4 <-    df.faurby3 |>    mutate(site = ifelse(is.na(PBDB_ID), NOW_ID, PBDB_ID)) df_body_mass <-    df.body.mass |>    group_by(Genus) |>    summarise(mean.size = mean(Size_Est))"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/pre-processing-data.html","id":"processing-and-flagging-data-with-buccaneer","dir":"Articles","previous_headings":"","what":"Processing and flagging data with Buccaneer","title":"pre-processing-data","text":"use function clean_occ_fossil make simple data cleaning, processing flagging occurrence records. example remove record NA columns flag records maximum minimum age range greater 5 myr, calculate midpoint age, time origination (TS) time extinction (TE)","code":"df_occ_faurby <-    clean_occ_fossil(df.occ.fossil = df.faurby4,                   method.ages = \"midpoint\",                  thresh.age.range = 5,                   species = \"Genus\",                  Max.age = \"Maximum_Age\",                  Min.age = \"Minimum_Age\",                   site = \"site\",                  lat = \"Latitude\",                  lng = \"Longitude\",                  remove.sub.species = TRUE,                   comp.TS.TE = TRUE,                   group = \"Suborder\") df_occ_faurby <-    df_occ_faurby |>    filter(species != \"Delete\")  # filtering TS and TE per species  df_TS_TE_faurby <-    df_occ_faurby |>    dplyr::distinct(species, .keep_all = T)  # joining TS and TE with body mass  df_TS_TE_mass <-    df_body_mass |>    left_join(df_TS_TE_faurby, by = c(Genus = \"species\")) |>    rename(species = \"Genus\") |>    filter(!is.na(TS) & !is.na(TE)) |>    filter(!is.na(site))  # creating time intervals (bins)  bins <- seq(from = max(df_occ_faurby$Max.age), to = min(df_occ_faurby$Min.age), by = -5)"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Time series metrics","text":"use data processed article xXXXX.","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"loading-data-and-packages","dir":"Articles","previous_headings":"","what":"Loading data and packages","title":"Time series metrics","text":"","code":"data(\"df_TS_TE_faurby\") data(\"df_TS_TE_mass\") data(\"df_occ_faurby\")"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"clade-level-analysis","dir":"Articles","previous_headings":"Loading data and packages","what":"Clade level analysis","title":"Time series metrics","text":"Calculating time series clade level Plotting results","code":"regional_richness <-    regional_clade_richness(df.TS.TE = df_TS_TE_faurby,                           time.slice = 0.1,                           round.digits = 1,                           species = \"species\",                           TS = \"TS\",                           TE = \"TE\") regional_richness |>    mutate(time.slice = as.numeric(time.slice)) |>    ggplot(aes(x = time.slice, y = richness)) +   geom_smooth(se = TRUE, method = \"loess\", size = 1) +  # Line thickness for better visibility   geom_point(aes(x = time.slice, y = richness)) +   labs(title = \"\",        x = \"Tempo\",        y = \"Riqueza\") +   scale_x_continuous(breaks = seq(max(as.numeric(regional_richness$time.slice)), 0, by = -10)) +   scale_x_reverse() +   theme_minimal() +   theme(legend.position = \"none\")# Use a clean theme"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"regional-clade-mpd","dir":"Articles","previous_headings":"Loading data and packages > Clade level analysis","what":"regional clade mpd","title":"Time series metrics","text":"Calculating regional clade level mpd body size. First species Calculating comparing mpd within groups Calculating within species considering Caniformia focal group Joining results plot one graphic Plotting mpd results","code":"regional_mpd <-    clade_regional_mpd(df.TS.TE = df_TS_TE_mass,                       time.slice = 0.1,                      trait = \"mean.size\",                      round.digits = 1,                      species = \"species\",                      TS = \"TS\",                      TE = \"TE\",                      compute.ses.mpd = TRUE) regional_mpd_between <-    clade_regional_mpd(df.TS.TE = df_TS_TE_mass,                       time.slice = 0.1,                      trait = \"mean.size\",                      round.digits = 1,                      species = \"species\",                      TS = \"TS\",                      TE = \"TE\",                      compute.ses.mpd = TRUE,                      null.model = \"taxa.labels\",                      runs = 999,                       group = \"group\",                       group.focal.compare = c(\"Caniformia\", \"Feliformia\"),                      type.comparison = \"between\") regional_mpd_within <-    clade_regional_mpd(df.TS.TE = df_TS_TE_mass,                       time.slice = 0.1,                      trait = \"mean.size\",                      round.digits = 1,                      species = \"species\",                      TS = \"TS\",                      TE = \"TE\",                      compute.ses.mpd = TRUE,                      null.model = \"taxa.labels\",                      runs = 999,                       group = \"group\",                       group.focal.compare = c(\"Caniformia\", \"Feliformia\"),                      type.comparison = \"within\") all_mpd_regional <- rbind(regional_mpd, regional_mpd_between, regional_mpd_within) all_mpd_regional2 <- data.frame(all_mpd_regional, group_res = rep(c(\"All\", \"Between\", \"Within\"), each = nrow(regional_mpd_within))) all_mpd_regional2 |>    ggplot(aes(x = time.slice, y = ses.mpd, color = group_res)) +   geom_point(aes(x = time.slice, y = ses.mpd)) +   geom_smooth(se = TRUE, method = \"loess\", size = 1) +  # Line thickness for better visibility   labs(title = \"\",        x = \"Time\",        y = \"Mean Pairwise Distance (ses)\") +   scale_x_continuous(breaks = seq(40, 0, by = -10)) +   xlim(40, 0) +   theme_minimal() +   theme(legend.position = \"bottom\")# Use a clean theme"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"clade-site-richness","dir":"Articles","previous_headings":"Loading data and packages > Clade level analysis","what":"Clade site richness","title":"Time series metrics","text":"Plotting results","code":"site_richness <-    clade_site_richness(df.TS.TE = df_TS_TE_faurby,                        df.occ = df_occ_faurby,                        time.slice = 0.1,                        round.digits = 1,                       species = \"species\",                       TS = \"TS\",                       TE = \"TE\") site_richness |>    ggplot(aes(x = as.numeric(time.slice), y = mean.richness.site)) +   geom_point(aes(x = as.numeric(time.slice), y = mean.richness.site)) +   geom_smooth(se = TRUE, method = \"loess\", size = 1) +  # Line thickness for better visibility   labs(title = \"\",        x = \"Time\",        y = \"Mean site richness\") +   scale_x_continuous(breaks = seq(max(as.numeric(site_richness$time.slice)), 0, by = -10)) +   scale_x_reverse() +   theme_minimal() +   theme(legend.position = \"none\")# Use a clean theme"},{"path":[]},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"individual-species-regional-coexistence","dir":"Articles","previous_headings":"Loading data and packages > Individual species analysis","what":"Individual species regional coexistence","title":"Time series metrics","text":"output contain two data frames, one individual coexistences per species time slices, another containing mean species coexistence considering time slices can plot results time mean species coexistence three species can also plot time series species","code":"indiv_species_coex <-    IndivSpecies_regional_richness(df.TS.TE = df_TS_TE_faurby,                                   time.slice = 0.1,                                  round.digits = 1,                                  species = \"species\",                                  TS = \"TS\",                                  TE = \"TE\") df_mean_individual_species <- indiv_species_coex$mean_species_coexistence df_indiv_species_long <- indiv_species_coex$df_IndivSpp_coexist df_indiv_species_long |>    filter(species == \"Canis\" | species == \"Ursus\" | species == \"Ursavus\") |>    ggplot(aes(x = species, y = n.coexistence, fill = species)) +   geom_violin(trim = FALSE) +  # Line thickness for better visibility   geom_point(aes(x = species, y = n.coexistence, fill = species), shape = 21) +   labs(title = \"\",        x = \"Espécies\",        y = \"Coexistência média\") +   theme_minimal() +   theme(legend.position = \"none\",          panel.grid.major = element_line(linetype = \"dashed\"))# Use a clean theme df_indiv_species_long |>    filter(species == \"Canis\" | species == \"Ursavus\" | species == \"Ursus\" | species == \"Panthera\") |>    ggplot(aes(x = time.slice, y = n.coexistence, color = species, group = species)) +  # Line thickness for better visibility   geom_smooth(se = TRUE, method = \"loess\", size = 1) +   geom_point(aes(x = time.slice, y = n.coexistence, color = species), shape = 21) +   facet_wrap(~species) +   labs(title = \"\",        x = \"Time\",        y = \"number of coexistences by species\") +   theme_minimal()  +   scale_x_continuous(breaks = seq(max(df_indiv_species_long$time.slice), 0, by = -10)) +   scale_x_reverse() +   theme(legend.position = \"none\")# Use a clean theme"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"individual-species-regional-mpd","dir":"Articles","previous_headings":"Loading data and packages > Individual species analysis","what":"Individual species regional mpd","title":"Time series metrics","text":"can also plot individual species mpd species coexisting regional context. also use data body mass species Plotting results individual species mpd object","code":"df_TS_TE_mass2 <-    df_TS_TE_mass |>    filter(across(c(TS, TE), ~ !is.na(.)))  indiv_regional_species_mpd <-   IndivSpecies_regional_mpd(df.TS.TE = df_TS_TE_mass,                              time.slice = 0.1,                              trait = \"mean.size\",                             round.digits = 1,                              species = \"species\",                             TS = \"TS\",                             TE = \"TE\")  df_indiv_species_mpd_long<- indiv_regional_species_mpd$df_IndivSpp_mpd df_indiv_species_mpd_long |>    filter(species == \"Canis\" | species == \"Ursavus\" | species == \"Ursus\" | species == \"Panthera\") |>    ggplot(aes(x = time.slice, y = mpd, color = species, group = species)) +  # Line thickness for better visibility   geom_point(aes(x = time.slice, y = mpd, color = species), shape = 21) +   geom_smooth(se = TRUE, method = \"loess\", size = 1) +   facet_wrap(~species) +   labs(title = \"\",        x = \"Tempo\",        y = \"Distância média (mpd)\") +   theme_minimal()  +   scale_x_continuous(breaks = seq(max(df_indiv_species_mpd_long$time.slice), 0, by = -10)) +   scale_x_reverse() +   theme(legend.position = \"none\")# Use a clean theme"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"individual-species-site-coexistence","dir":"Articles","previous_headings":"Loading data and packages > Individual species analysis","what":"Individual species site coexistence","title":"Time series metrics","text":"perform calculations using site criteria individual species coexistence plotting species coexistence considering site coexistence","code":"indiv_species_site_coex <-    IndivSpec_site_richness(df.TS.TE = df_TS_TE_faurby,                           df.occ = df_occ_faurby,                            time.slice = 0.1,                           round.digits = 1,                           species = \"species\",                           TS = \"TS\",                           TE = \"TE\",                           Max.age = \"Max.age\",                           Min.age = \"Min.age\",                           site = \"site\")  indiv_species_site_coex2 <-    indiv_species_site_coex |>    mutate(time.slice = as.numeric(time.slice)) indiv_species_site_coex2 |>    filter(species == \"Alopecocyon\" | species == \"Simocyon\" | species == \"Prepoecilogale\" | species == \"Vormela\" | species == \"Hesperocyon\") |>    ggplot(aes(x = time.slice, y = mean.per.spp, color = species, group = species)) +  # Line thickness for better visibility   geom_smooth(se = TRUE, method = \"loess\", size = 1) +   facet_wrap(~species) +   labs(title = \"\",        x = \"Time\",        y = \"mean coexistence\") +   theme_minimal()  +   scale_x_continuous(breaks = seq(max(indiv_species_site_coex2$time.slice), 0, by = -10)) +   scale_x_reverse() +   theme(legend.position = \"none\")"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"individual-species-site-mpd","dir":"Articles","previous_headings":"Loading data and packages > Individual species analysis","what":"Individual species site mpd","title":"Time series metrics","text":"can calculate mean pairwise distances individual species coexistence metrics based site co-occurrence","code":"df_TS_TE_mass3 <-    df_TS_TE_mass2 |>    rename(species = \"Genus\")   indiv_species_site_mpd <-    IndivSpec_site_mpd(df.TS.TE = df_TS_TE_mass3,                       df.occ = df_occ_faurby,                       time.slice = 0.1,                       trait = \"mean.size\",                      round.digits = 1,                      species = \"species\",                      TS = \"TS\",                      TE = \"TE\",                      Max.age = \"Max.age\",                      Min.age = \"Min.age\",                      site = \"site\")"},{"path":"https://gabrielnakamura.github.io/Buccaneer/articles/time-series-metrics.html","id":"individual-reach-coexistence","dir":"Articles","previous_headings":"Loading data and packages > Individual species analysis","what":"Individual reach coexistence","title":"Time series metrics","text":"calculate individual mean coexistence using reach criteria plotting individual species coexistence reach criteria","code":"indiv_species_reach_coex <-    IndivSpec_reach_richness(df.TS.TE = df_TS_TE_faurby,                            df.occ = df_occ_faurby,                            time.slice = 0.1,                             round.digits = 1,                            species = \"species\",                            TS = \"TS\",                            TE = \"TE\",                            Max.age = \"Max.age\",                            Min.age = \"Min.age\",                            lat = \"lat\",                            lon = \"lng\") indiv_species_reach_coex2 <-    indiv_species_reach_coex |>    mutate(time.slice = as.numeric(time.slice))  indiv_species_reach_coex2 |>    filter(species == \"Ursus\" | species == \"Simocyon\" | species == \"Plionarctos\" | species == \"Vormela\" | species == \"Hesperocyon\") |>    ggplot(aes(x = time.slice, y = n.coexistence, color = species, group = species)) +  # Line thickness for better visibility   geom_smooth(se = TRUE, method = \"loess\", size = 1) +   facet_wrap(~species) +   labs(title = \"\",        x = \"Time\",        y = \"mean coexistence\") +   theme_minimal()  +   scale_x_continuous(breaks = seq(max(indiv_species_site_coex2$time.slice), 0, by = -10)) +   scale_x_reverse() +   theme(legend.position = \"none\")"},{"path":[]},{"path":"https://gabrielnakamura.github.io/Buccaneer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2025). buccaneer: Package (One Line, Title Case). R package version 0.0.0.9000, https://gabrielnakamura.github.io/Buccaneer/.","code":"@Manual{,   title = {buccaneer: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://gabrielnakamura.github.io/Buccaneer/}, }"},{"path":"https://gabrielnakamura.github.io/Buccaneer/index.html","id":"download","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"install development version package user must type:","code":"# install.packages(\"devtools\") devtools::install_github(\"GabrielNakamura/Buccaneer\", ref = \"main\")"},{"path":"https://gabrielnakamura.github.io/Buccaneer/index.html","id":"help-page","dir":"","previous_headings":"","what":"Help page","title":"What the Package Does (One Line, Title Case)","text":"","code":"help(package = \"buccaneer\")"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/Assemblage_regional_mpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mean pairwise distance for each site in time slices — Assemblage_regional_mpd","title":"Compute mean pairwise distance for each site in time slices — Assemblage_regional_mpd","text":"Compute mean pairwise distance site time slices","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/Assemblage_regional_mpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mean pairwise distance for each site in time slices — Assemblage_regional_mpd","text":"","code":"Assemblage_regional_mpd(   df.TS.TE,   df.occ,   time.slice,   grid.size,   trait,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\",   Max.age = \"Max.age\",   Min.age = \"Min.age\",   lat = \"lat\",   lon = \"lng\",   crs = 4326 )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/Assemblage_regional_mpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mean pairwise distance for each site in time slices — Assemblage_regional_mpd","text":"crs","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/Assemblage_regional_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean richness by communities in a time series — Assemblage_regional_richness","title":"Mean richness by communities in a time series — Assemblage_regional_richness","text":"Mean richness communities time series","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/Assemblage_regional_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean richness by communities in a time series — Assemblage_regional_richness","text":"","code":"Assemblage_regional_richness(   df.TS.TE,   df.occ,   time.slice,   grid.size,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\",   Max.age = \"Max.age\",   Min.age = \"Min.age\",   lat = \"lat\",   lon = \"lng\",   crs = 4326 )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/Assemblage_regional_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean richness by communities in a time series — Assemblage_regional_richness","text":"crs","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_reach_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute individual species coexistence based on reach criteria — IndivSpec_reach_richness","title":"Compute individual species coexistence based on reach criteria — IndivSpec_reach_richness","text":"Compute individual species coexistence based reach criteria","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_reach_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute individual species coexistence based on reach criteria — IndivSpec_reach_richness","text":"","code":"IndivSpec_reach_richness(   df.TS.TE,   df.occ,   time.slice,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\",   Max.age = \"Max.age\",   Min.age = \"Min.age\",   lat = \"lat\",   lon = \"lng\" )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_reach_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute individual species coexistence based on reach criteria — IndivSpec_reach_richness","text":"df.TS.TE data frame object containing least three columns. Species names, origination time extinction time species. df.occ data frame object containing occurrence records species. must least column indicating name species, minimum maximum age estimate, site location ID. time.slice scalar indicating time interval consecutive time slices. round.digits scalar indicating number digits time origination time extinction. species character indicating name column data frame containing species name information. TS character indicating name columns data frame containing information origination time. TE character indicating name column data frame containing information extinction time. Max.age character indicating name column containing upper age limit occurrence record. Min.age character indicating name column containing lower age limit occurrence record. lat character indicating name column containing latitude occurrence record df.occ. lon character indicating name column containing longitude occurrence record df.occ.","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_reach_richness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute individual species coexistence based on reach criteria — IndivSpec_reach_richness","text":"data frame containing name species, mean coexistence value calculated time slice considering reach criteria co-occurrence","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_site_mpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mean pairwise distance for each species co-occurring in sites and time slices — IndivSpec_site_mpd","title":"Compute mean pairwise distance for each species co-occurring in sites and time slices — IndivSpec_site_mpd","text":"Compute mean pairwise distance species co-occurring sites time slices","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_site_mpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mean pairwise distance for each species co-occurring in sites and time slices — IndivSpec_site_mpd","text":"","code":"IndivSpec_site_mpd(   df.TS.TE,   df.occ,   time.slice,   trait,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\",   Max.age = \"Max.age\",   Min.age = \"Min.age\",   site = \"site\" )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_site_mpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mean pairwise distance for each species co-occurring in sites and time slices — IndivSpec_site_mpd","text":"df.TS.TE data frame object containing least three columns. Species names, origination time extinction time species. df.occ data frame object containing occurrence records species. must least column indicating name species, minimum maximum age estimate, site location ID. time.slice scalar indicating time interval consecutive time slices. trait Numeric indicating values traits species round.digits scalar indicating number digits time origination time extinction. species character indicating name column data frame containing species name information. TS character indicating name columns data frame containing information origination time. TE character indicating name column data frame containing information extinction time. Max.age character indicating name column df.occ containing upper age limit occurrence record. Min.age character indicating name column df.occ containing lower age limit occurrence record. site character indicating name column df.occ containing information site location.","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_site_mpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mean pairwise distance for each species co-occurring in sites and time slices — IndivSpec_site_mpd","text":"data frame containing name species, mean mpd value calculated time slice considering sites species occur time slice","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_site_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time series for species based on mean co-occurrence per site — IndivSpec_site_richness","title":"Compute time series for species based on mean co-occurrence per site — IndivSpec_site_richness","text":"Compute time series species based mean co-occurrence per site","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_site_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time series for species based on mean co-occurrence per site — IndivSpec_site_richness","text":"","code":"IndivSpec_site_richness(   df.TS.TE,   df.occ,   time.slice,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\",   Max.age = \"Max.age\",   Min.age = \"Min.age\",   site = \"site\" )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_site_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time series for species based on mean co-occurrence per site — IndivSpec_site_richness","text":"df.TS.TE data frame object containing least three columns. Species names, origination time extinction time species. df.occ data frame object containing occurrence records species. must least column indicating name species, minimum maximum age estimate, site location ID. time.slice scalar indicating time interval consecutive time slices. round.digits scalar indicating number digits time origination time extinction. species character indicating name column data frame containing species name information. TS character indicating name columns data frame containing information origination time. TE character indicating name column data frame containing information extinction time. Max.age character indicating name column containing upper age limit occurrence record. Min.age character indicating name column containing lower age limit occurrence record. site character indicating name column containing information site location.","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpec_site_richness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute time series for species based on mean co-occurrence per site — IndivSpec_site_richness","text":"data frame containing name species, mean coexistence value calculated time slice considering sites species occur time slice","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpecies_regional_mpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute regional time series of Individual Species Mean Pairwise trait distance — IndivSpecies_regional_mpd","title":"Compute regional time series of Individual Species Mean Pairwise trait distance — IndivSpecies_regional_mpd","text":"Compute regional time series Individual Species Mean Pairwise trait distance","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpecies_regional_mpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute regional time series of Individual Species Mean Pairwise trait distance — IndivSpecies_regional_mpd","text":"","code":"IndivSpecies_regional_mpd(   df.TS.TE,   time.slice,   trait,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\" )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpecies_regional_mpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute regional time series of Individual Species Mean Pairwise trait distance — IndivSpecies_regional_mpd","text":"df.TS.TE data frame object containing least four columns. Species names, origination time, extinction time trait value species. time.slice scalar indicating time interval consecutive time slices trait Numeric indicating values traits species round.digits scalar indicating number digits time origination time extinction species character indicating name column data frame containing species name information TS character indicating name columns data frame containing information origination time TE character indicating name column data frame containing information extinction time","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpecies_regional_mpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute regional time series of Individual Species Mean Pairwise trait distance — IndivSpecies_regional_mpd","text":"data frame containing name species mean value mpd species time slice","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpecies_regional_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate individual species coexistence in regional scale — IndivSpecies_regional_richness","title":"Calculate individual species coexistence in regional scale — IndivSpecies_regional_richness","text":"Calculate individual species coexistence regional scale","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpecies_regional_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate individual species coexistence in regional scale — IndivSpecies_regional_richness","text":"","code":"IndivSpecies_regional_richness(   df.TS.TE,   time.slice,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\" )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpecies_regional_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate individual species coexistence in regional scale — IndivSpecies_regional_richness","text":"df.TS.TE data frame object containing least three columns. Species names, origination time extinction time species. time.slice scalar indicating time interval consecutive time slices round.digits scalar indicating number digits time origination time extinction species character indicating name column data frame containing species name information TS character indicating name columns data frame containing information origination time TE character indicating name column data frame containing information extinction time","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/IndivSpecies_regional_richness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate individual species coexistence in regional scale — IndivSpecies_regional_richness","text":"list two elements: df_IndivSpp_coexist data frame species name, number coexistence sepecies time slice mean_species_coexistence data frame three column. species name, mean number coexistence species variance considering time slices","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/aux_matrix_regional_coex.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliary function to compute regional coexistence matrix — aux_matrix_regional_coex","title":"Auxiliary function to compute regional coexistence matrix — aux_matrix_regional_coex","text":"Auxiliary function compute regional coexistence matrix","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/aux_matrix_regional_coex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliary function to compute regional coexistence matrix — aux_matrix_regional_coex","text":"","code":"aux_matrix_regional_coex(   df.TS.TE,   time.slice,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\" )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/aux_matrix_regional_coex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliary function to compute regional coexistence matrix — aux_matrix_regional_coex","text":"df.TS.TE  time.slice  round.digits  species  TS  TE","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/calc_reach.html","id":null,"dir":"Reference","previous_headings":"","what":"Auxiliar function to calculate reach criteria — calc_reach","title":"Auxiliar function to calculate reach criteria — calc_reach","text":"Auxiliar function calculate reach criteria","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/calc_reach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Auxiliar function to calculate reach criteria — calc_reach","text":"","code":"calc_reach(df.coords)"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/calc_reach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auxiliar function to calculate reach criteria — calc_reach","text":"df.coords","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/check_crossing_boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Check occurrence records with crossing boundaries in time bins — check_crossing_boundaries","title":"Check occurrence records with crossing boundaries in time bins — check_crossing_boundaries","text":"Check occurrence records crossing boundaries time bins","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/check_crossing_boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check occurrence records with crossing boundaries in time bins — check_crossing_boundaries","text":"","code":"check_crossing_boundaries(   df.occ.fossil,   interval,   species = \"species\",   Max.age = \"Maximum_Age\",   Min.age = \"Minimum_Age\",   remove.sub.species = TRUE )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/check_crossing_boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check occurrence records with crossing boundaries in time bins — check_crossing_boundaries","text":"df.occ.fossil  interval  species  Max.age  Min.age  remove.sub.species","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clade_regional_mpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute regional clade Mean Pairwise Distance in a time series — clade_regional_mpd","title":"Compute regional clade Mean Pairwise Distance in a time series — clade_regional_mpd","text":"Compute regional clade Mean Pairwise Distance time series","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clade_regional_mpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute regional clade Mean Pairwise Distance in a time series — clade_regional_mpd","text":"","code":"clade_regional_mpd(   df.TS.TE,   time.slice,   trait,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\",   compute.ses.mpd = TRUE,   null.model = \"taxa.labels\",   runs = 999,   group = NULL,   group.focal.compare = NULL,   type.comparison = NULL )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clade_regional_mpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute regional clade Mean Pairwise Distance in a time series — clade_regional_mpd","text":"runs","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clade_site_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time series based on mean site richness — clade_site_richness","title":"Compute time series based on mean site richness — clade_site_richness","text":"Compute time series based mean site richness","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clade_site_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time series based on mean site richness — clade_site_richness","text":"","code":"clade_site_richness(   df.TS.TE,   df.occ,   time.slice,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\" )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clade_site_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time series based on mean site richness — clade_site_richness","text":"df.TS.TE  df.occ  time.slice  round.digits  species  TS  TE","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clean_occ_fossil.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleaning and flagging fossil occurrence records according different criteria — clean_occ_fossil","title":"Cleaning and flagging fossil occurrence records according different criteria — clean_occ_fossil","text":"Cleaning flagging fossil occurrence records according different criteria","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clean_occ_fossil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleaning and flagging fossil occurrence records according different criteria — clean_occ_fossil","text":"","code":"clean_occ_fossil(   df.occ.fossil,   method.ages = c(\"midpoint\", \"upper\", \"lower\"),   thresh.age.range = 10,   species = \"species\",   Max.age = \"Maximum_Age\",   Min.age = \"Minimum_Age\",   remove.sub.species = TRUE,   comp.TS.TE = TRUE,   lat = NULL,   lng = NULL,   site = NULL,   group = NULL,   trait = NULL )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/clean_occ_fossil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleaning and flagging fossil occurrence records according different criteria — clean_occ_fossil","text":"...","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/get_summary_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute summary statistics from fossil record — get_summary_interval","title":"Compute summary statistics from fossil record — get_summary_interval","text":"Compute summary statistics fossil record","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/get_summary_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute summary statistics from fossil record — get_summary_interval","text":"","code":"get_summary_interval(   df.occ.fossil,   interval,   age.occ = \"midpoint\",   species = \"species\",   Max.age = \"Maximum_Age\",   Min.age = \"Minimum_Age\",   TS = NULL,   TE = NULL,   lat = NULL,   lng = NULL,   site = NULL,   group = NULL,   trait = NULL,   ... )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/get_summary_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute summary statistics from fossil record — get_summary_interval","text":"df.occ.fossil  interval  age.occ  species  Max.age  Min.age  TS  TE  lat  lng  site  group  trait  ...","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/get_summary_slices.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting summary information for time bins — get_summary_slices","title":"Getting summary information for time bins — get_summary_slices","text":"Getting summary information time bins","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/get_summary_slices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting summary information for time bins — get_summary_slices","text":"","code":"get_summary_slices(   df.TS.TE,   timeframe,   method.ages = c(\"midpoint\", \"upper\", \"lower\"),   thresh.age.range = 10,   species = \"species\",   Max.age = \"Maximum_Age\",   Min.age = \"Minimum_Age\",   TS = NULL,   TE = NULL,   lat = NULL,   lng = NULL,   site = NULL,   group = NULL,   trait = NULL,   ... )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/get_summary_slices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting summary information for time bins — get_summary_slices","text":"...","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/plot_occ_bins.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot occurrence records and age ranges — plot_occ_bins","title":"Plot occurrence records and age ranges — plot_occ_bins","text":"Plot occurrence records age ranges","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/plot_occ_bins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot occurrence records and age ranges — plot_occ_bins","text":"","code":"plot_occ_bins(   df.occ.fossil,   species = \"accepted_name\",   max.age = \"max_ma\",   min.age = \"min_ma\",   occ.gradient = TRUE,   log = TRUE,   name.scale.occ = \"viridis\",   x.axis.name = \"age range\",   y.axis.name = \"species.name\",   show.species.name = FALSE,   age.scheme = TRUE )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/plot_occ_bins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot occurrence records and age ranges — plot_occ_bins","text":"df.occ.fossil  species  max.age  min.age  occ.gradient  log  name.scale.occ  x.axis.name  y.axis.name  show.species.name","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/regional_clade_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates regional clade richness for lineages — regional_clade_richness","title":"Calculates regional clade richness for lineages — regional_clade_richness","text":"Calculates regional clade richness lineages","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/regional_clade_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates regional clade richness for lineages — regional_clade_richness","text":"","code":"regional_clade_richness(   df.TS.TE,   time.slice,   round.digits = 1,   species = \"species\",   TS = \"TS\",   TE = \"TE\" )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/regional_clade_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates regional clade richness for lineages — regional_clade_richness","text":"df.TS.TE  time.slice  round.digits  species  TS  TE","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/ses.mpd.modif.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — ses.mpd.modif","title":"Title — ses.mpd.modif","text":"Title","code":""},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/ses.mpd.modif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — ses.mpd.modif","text":"","code":"ses.mpd.modif(   samp,   dis,   null.model = c(\"taxa.labels\", \"richness\", \"frequency\", \"sample.pool\", \"phylogeny.pool\",     \"independentswap\", \"trialswap\"),   abundance.weighted = FALSE,   runs = 999,   iterations = 1000 )"},{"path":"https://gabrielnakamura.github.io/Buccaneer/reference/ses.mpd.modif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — ses.mpd.modif","text":"iterations","code":""}]
